// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(BUYER)
  listings  Listing[] @relation("SellerListings")
  favorites Favorite[]
  inquiries Inquiry[]
  createdAt DateTime  @default(now())
}

model Listing {
  id          String     @id @default(uuid())
  title       String
  description String
  price       Float
  mileage     Int
  year        Int
  brand       String
  model       String
  location    String
  condition   Condition
  images      Image[]
  seller      User       @relation("SellerListings", fields: [sellerId], references: [id])
  sellerId    String
  favorites   Favorite[]
  inquiries   Inquiry[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Image {
  id         String   @id @default(uuid())
  url        String
  listing    Listing  @relation(fields: [listingId], references: [id])
  listingId  String
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  createdAt DateTime @default(now())

  @@unique([userId, listingId]) // Prevent duplicate favorites
}

model Inquiry {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  message   String
  createdAt DateTime @default(now())
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum Condition {
  NEW
  USED
  DAMAGED
}
